'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _parseFilepath = require('parse-filepath');

var _parseFilepath2 = _interopRequireDefault(_parseFilepath);

var _slash = require('slash');

var _slash2 = _interopRequireDefault(_slash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _frontMatter = require('front-matter');

var _frontMatter2 = _interopRequireDefault(_frontMatter);

var _htmlFrontmatter = require('html-frontmatter');

var _htmlFrontmatter2 = _interopRequireDefault(_htmlFrontmatter);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var debug = require('debug')('gatsby:glob');

module.exports = function (directory, callback) {
  var pagesData = [];

  var app = require(directory + '/app');

  // Make this list easy to modify through the config?
  // Or just keep adding extensions...?
  var fileTypesToGlob = ['coffee', 'cjsx', 'jsx', 'js', 'md', 'html', 'yaml', 'toml', 'ipynb'];
  var fileGlobQuery = fileTypesToGlob.map(function (type) {
    return '*.' + type;
  });
  var joinedFileQuery = fileGlobQuery.join('|');
  var globQuery = directory + '/pages/**/?(' + joinedFileQuery + ')';
  (0, _glob2['default'])(globQuery, null, function (err, pages) {
    if (err) {
      return callback(err);
    }

    pages.forEach(function (page) {
      var pageData = {};
      pageData.file = {};

      pageData.file = (0, _parseFilepath2['default'])(_path2['default'].relative(directory + '/pages', page));
      var parsed = pageData.file;

      pageData.file.ext = parsed.extname.slice(1);
      var ext = pageData.file.ext;

      // Determine require path
      pageData.requirePath = (0, _slash2['default'])(_path2['default'].relative(directory + '/pages', page));

      // Make sure slashes on parsed.dirname are correct for Windows
      parsed.dirname = (0, _slash2['default'])(parsed.dirname);

      // Load data for each file type.
      // TODO use webpack-require to ensure data loaded
      // here (in node context) is consistent with what's loaded
      // in the browser.
      var data = undefined;
      if (ext === 'md') {
        var rawData = (0, _frontMatter2['default'])(_fs2['default'].readFileSync(page, 'utf-8'));
        data = (0, _objectAssign2['default'])({}, rawData.attributes);
        pageData.data = data;
      } else if (ext === 'html') {
        var html = _fs2['default'].readFileSync(page, 'utf-8');
        data = (0, _objectAssign2['default'])({}, (0, _htmlFrontmatter2['default'])(html), { body: html });
        pageData.data = data;
      } else {
        data = {};
      }

      // Determine path for page (unless it's a file that starts with an
      // underscore as these don't become pages).
      if (!(parsed.name.slice(0, 1) === '_')) {
        if (data.path) {
          // Path was hardcoded.
          pageData.path = data.path;
        } else if (app.rewritePath) {
          pageData.path = app.rewritePath(parsed, pageData);
        }

        // If the above didn't set a path, set our own.
        if (!pageData.path) {
          // If this is an index page or template, it's path is /foo/bar/
          if (parsed.name === 'index' || parsed.name === 'template') {
            if (parsed.dirname === '') {
              pageData.path = '/';
            } else {
              pageData.path = '/' + parsed.dirname + '/';
            }
            // Else if not an index, create a path like /foo/bar/
            // and rely upon static-site-generator-webpack-plugin to add index.html
          } else {
              if (parsed.dirname === '') {
                pageData.path = '/' + parsed.name + '/';
              } else {
                pageData.path = '/' + parsed.dirname + '/' + parsed.name + '/';
              }
            }
        }

        // Set the "template path"
      } else if (parsed.name === '_template') {
          pageData.templatePath = '/' + parsed.dirname + '/';
        }

      pagesData.push(pageData);
    });

    debug('globbed ' + pagesData.length + ' pages');
    return callback(null, pagesData);
  });
};
